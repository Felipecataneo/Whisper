import streamlit as st
import openai
from pathlib import Path
import tempfile
import os

st.set_page_config(page_title="Transcri√ß√£o de √Åudio", layout="wide")

# Sidebar
st.sidebar.header("Configura√ß√µes")

api_key = st.sidebar.text_input("OpenAI API Key:", type="password")
if api_key:
    openai.api_key = api_key

language = st.sidebar.selectbox(
    "Idioma do √°udio:",
    [
        ("Detec√ß√£o autom√°tica", "auto"),
        ("Portugu√™s", "pt"),
        ("Ingl√™s", "en"),
        ("Espanhol", "es"),
        ("Franc√™s", "fr"),
        ("Alem√£o", "de"),
        ("Italiano", "it"),
        ("Japon√™s", "ja"),
        ("Coreano", "ko"),
        ("Chin√™s", "zh"),
        ("Russo", "ru"),
        ("√Årabe", "ar"),
        ("Hindi", "hi"),
        ("Holand√™s", "nl"),
        ("Turco", "tr")
    ],
    format_func=lambda x: x[0]
)

translate = st.sidebar.checkbox("Traduzir para ingl√™s")

# Main
st.title("Transcri√ß√£o de √Åudio - OpenAI Whisper")

uploaded_file = st.file_uploader(
    "Upload do arquivo de √°udio",
    type=["mp3", "mp4", "wav", "m4a", "webm", "ogg", "flac"]
)

if uploaded_file:
    file_size_mb = len(uploaded_file.getvalue()) / (1024 * 1024)
    
    if file_size_mb > 25:
        st.error(f"‚ö†Ô∏è Arquivo muito grande: {file_size_mb:.1f}MB. Limite da OpenAI: 25MB")
        st.stop()
    
    st.info(f"Tamanho do arquivo: {file_size_mb:.1f}MB")

if uploaded_file and st.button("Processar", type="primary"):
    
    if not api_key:
        st.error("‚ö†Ô∏è Insira a API key da OpenAI na barra lateral.")
        st.stop()
    
    with st.spinner("Processando √°udio..."):
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp:
                tmp.write(uploaded_file.getvalue())
                tmp_path = tmp.name
            
            with open(tmp_path, "rb") as audio:
                params = {
                    "model": "whisper-1",
                    "file": audio
                }
                
                if language[1] != "auto":
                    params["language"] = language[1]
                
                if translate:
                    result = openai.audio.translations.create(**params)
                else:
                    result = openai.audio.transcriptions.create(**params)
            
            transcript = result.text
            os.unlink(tmp_path)
            
            st.success("‚úÖ Processamento conclu√≠do")
            st.text_area("Transcri√ß√£o:", transcript, height=300)
            
            st.download_button(
                "üì• Baixar transcri√ß√£o (.txt)",
                transcript,
                file_name="transcricao.txt",
                mime="text/plain"
            )
        
        except Exception as e:
            st.error(f"‚ùå Erro ao processar: {str(e)}")
            if os.path.exists(tmp_path):
                os.unlink(tmp_path)
